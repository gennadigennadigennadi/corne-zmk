/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <150>;
};
/*                                      42 KEY MATRIX / LAYOUT MAPPING
╭────────────────────────┬────────────────────────╮ ╭─────────────────────────┬─────────────────────────╮
│  0   1   2   3   4   5 │  6   7   8   9  10  11 │ │ LT5 LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 RT5 │
│ 12  13  14  15  16  17 │ 18  19  20  21  22  23 │ │ LM5 LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 RM5 │
│ 24  25  26  27  28  29 │ 30  31  32  33  34  35 │ │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5 │
╰───────────╮ 36  37  38 │ 39  40  41 ╭───────────╯ ╰───────────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────────╯
            ╰────────────┴────────────╯                         ╰─────────────┴─────────────╯             
*/
/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <125>;
            quick-tap-ms = <0>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            #binding-cells = <2>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>; // right hand
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            #binding-cells = <2>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>; // left hand
            hold-trigger-on-release;             // delay positional check until key-release
        };
    };

    combos {
        compatible = "zmk,combos";

        // combo_super {
            //     timeout-ms = <50>;
            //     //S+T
            //     key-positions = <16 15>;
            //     bindings = <&kp LCMD>;
            // };

        // combo_ralt {
            //     timeout-ms = <50>;
            //     key-positions = <21 20>;
            //     bindings = <&kp RALT>;
            // };
            //
        // combo_lalt {
            //     timeout-ms = <50>;
            //     key-positions = <14 15>;
            //     bindings = <&kp LALT>;
            // };
            //
        // combo_lctrl {
            //     timeout-ms = <50>;
            //     key-positions = <16 14>;
            //     bindings = <&kp LCTRL>;
            // };
            //
        // combo_rctrl {
            //     timeout-ms = <50>;
            //     key-positions = <19 21>;
            //     bindings = <&kp RCTRL>;
            // };

        // combo_rgui {
            //     timeout-ms = <50>;
            //     // N+E
            //     key-positions = <19 20>;
            //     bindings = <&kp RGUI>;
            // };

        hyper {
            bindings = <&kp LA(LC(LG(LEFT_SHIFT)))>;
            key-positions = <19 20 21>;
        };
    };

    macros {
        small_arrow: small_arrow {
            compatible = "zmk,behavior-macro";
            label = "small_arrow";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GREATER_THAN>;
            wait-ms = <10>;
        };

        big_arrow: big_arrow {
            compatible = "zmk,behavior-macro";
            label = "big_arrow";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GREATER_THAN>;
            wait-ms = <10>;
        };

        double_colon: double_colon {
            compatible = "zmk,behavior-macro";
            label = "double_colon";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp COLON>;
            wait-ms = <10>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &none  &kp Q          &kp W         &kp F        &kp P         &kp B             &kp J    &kp L        &kp U           &kp Y         &kp SINGLE_QUOTE  &none
                &none  &hml LSHIFT A  &hml LCTRL R  &hml LALT S  &hml LGUI T   &kp G             &kp M    &hmr RGUI N  &hmr RALT E     &hmr RCTRL I  &hmr RSHIFT O      &none
                &none  &kp Z          &kp X         &kp C        &kp D         &kp V             &kp K    &kp H        &kp COMMA       &kp DOT       &kp SLASH         &none
                &kp ESC      &lt 1 SPACE   &kp TAB           &kp RET  &mo 2        &kp BACKSPACE
            >;
        };

        EXT {
            bindings = <
                &none  &kp EXCLAMATION  &kp AT_SIGN       &kp HASH      &kp DOLLAR    &kp PERCENT    &kp CARET      &kp AMPERSAND  &kp ASTERISK  &kp TILDE  &kp GRAVE      &none
                &none  &kp ESC          &sk LEFT_CONTROL  &sk LEFT_ALT  &sk LEFT_GUI  &kp LSHIFT     &kp LEFT       &kp DOWN       &kp UP        &kp RIGHT  &kp BACKSPACE  &none
                &none  &kp LC(Z)        &kp LC(X)         &kp LC(C)     &none         &kp LC(V)      &double_colon  &small_arrow   &big_arrow    &none      &none          &none
                &trans        &trans        &none          &none          &mo 3          &none
            >;
        };

        sym {
            bindings = <
                &none  &kp EXCL   &kp AT     &kp HASH  &kp COLON  &kp SEMICOLON    &kp EQUAL     &kp N7  &kp N8  &kp N9  &kp PLUS   &none
                &none  &kp BSLH   &kp PIPE   &kp LBRC  &kp LPAR   &kp LBKT         &kp ASTERISK  &kp N4  &kp N5  &kp N6  &kp MINUS  &none
                &none  &kp MINUS  &kp UNDER  &kp RBRC  &kp RPAR   &kp RBKT         &kp N0        &kp N1  &kp N2  &kp N3  &kp FSLH   &none
                &none     &mo 3      &none            &kp ENTER     &trans  &none
            >;
        };

        Sym2 {
            bindings = <
                &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3       &bt BT_CLR      &trans  &kp F7  &kp F8  &kp F9  &kp GRAVE     &none
                &none  &trans        &kp K_PREV    &kp C_PREV    &kp C_PLAY         &kp C_NEXT      &trans  &kp F4  &kp F5  &kp F6  &kp TILDE     &none
                &none  &kp C_BRI_DN  &kp C_BRI_UP  &kp C_MUTE    &kp C_VOLUME_DOWN  &kp C_VOL_UP    &trans  &kp F1  &kp F2  &kp F3  &kp QUESTION  &none
                &none         &none              &trans          &none   &trans  &trans
            >;
        };
    };
};
